/*
 * This file is part of Waarp Project (named also Waarp or GG).
 *
 *  Copyright (c) 2019, Waarp SAS, and individual contributors by the @author
 *  tags. See the COPYRIGHT.txt in the distribution for a full listing of
 * individual contributors.
 *
 *  All Waarp Project is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * Waarp is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 * Waarp . If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.waarp.thrift.r66;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.EnumMetaData;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TType;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.transport.TIOStreamTransport;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class R66Request
    implements TBase<R66Request, R66Request._Fields>, Cloneable {
  /**
   *
   */
  private static final long serialVersionUID = 5084190194755640723L;

  private static final TStruct STRUCT_DESC = new TStruct("R66Request");

  private static final TField MODE_FIELD_DESC =
      new TField("mode", TType.I32, (short) 1);
  private static final TField FROMUID_FIELD_DESC =
      new TField("fromuid", TType.STRING, (short) 2);
  private static final TField DESTUID_FIELD_DESC =
      new TField("destuid", TType.STRING, (short) 3);
  private static final TField FILE_FIELD_DESC =
      new TField("file", TType.STRING, (short) 4);
  private static final TField RULE_FIELD_DESC =
      new TField("rule", TType.STRING, (short) 5);
  private static final TField INFO_FIELD_DESC =
      new TField("info", TType.STRING, (short) 10);
  private static final TField MD5_FIELD_DESC =
      new TField("md5", TType.BOOL, (short) 11);
  private static final TField BLOCKSIZE_FIELD_DESC =
      new TField("blocksize", TType.I32, (short) 12);
  private static final TField START_FIELD_DESC =
      new TField("start", TType.STRING, (short) 13);
  private static final TField DELAY_FIELD_DESC =
      new TField("delay", TType.STRING, (short) 14);
  private static final TField NOTRACE_FIELD_DESC =
      new TField("notrace", TType.BOOL, (short) 15);
  private static final TField TID_FIELD_DESC =
      new TField("tid", TType.I64, (short) 20);
  private static final TField ACTION_FIELD_DESC =
      new TField("action", TType.I32, (short) 21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
      new HashMap<Class<? extends IScheme>, SchemeFactory>();

  static {
    schemes.put(StandardScheme.class, new R66RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new R66RequestTupleSchemeFactory());
  }

  private RequestMode mode; // required
  private String fromuid; // optional
  private String destuid; // optional
  private String file; // optional
  private String rule; // optional
  private String info; // optional
  private boolean md5; // optional
  private int blocksize; // optional
  private String start; // optional
  private String delay; // optional
  private boolean notrace; // optional
  private long tid; // optional
  private Action action; // optional

  /**
   * The set of fields this struct contains, along with convenience methods
   * for
   * finding and manipulating them.
   */
  public enum _Fields implements TFieldIdEnum {
    /**
     * @see RequestMode
     */
    MODE((short) 1, "mode"), FROMUID((short) 2, "fromuid"),
    DESTUID((short) 3, "destuid"), FILE((short) 4, "file"),
    RULE((short) 5, "rule"), INFO((short) 10, "info"), MD5((short) 11, "md5"),
    BLOCKSIZE((short) 12, "blocksize"), START((short) 13, "start"),
    DELAY((short) 14, "delay"), NOTRACE((short) 15, "notrace"),
    TID((short) 20, "tid"),
    /**
     * @see Action
     */
    ACTION((short) 21, "action");

    private static final Map<String, _Fields> byName =
        new HashMap<String, _Fields>();

    static {
      for (final _Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not
     * found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // MODE
          return MODE;
        case 2: // FROMUID
          return FROMUID;
        case 3: // DESTUID
          return DESTUID;
        case 4: // FILE
          return FILE;
        case 5: // RULE
          return RULE;
        case 10: // INFO
          return INFO;
        case 11: // MD5
          return MD5;
        case 12: // BLOCKSIZE
          return BLOCKSIZE;
        case 13: // START
          return START;
        case 14: // DELAY
          return DELAY;
        case 15: // NOTRACE
          return NOTRACE;
        case 20: // TID
          return TID;
        case 21: // ACTION
          return ACTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if
     * it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      final _Fields fields = findByThriftId(fieldId);
      if (fields == null) {
        throw new IllegalArgumentException(
            "Field " + fieldId + " doesn't exist!");
      }
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not
     * found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MD5_ISSET_ID = 0;
  private static final int __BLOCKSIZE_ISSET_ID = 1;
  private static final int __NOTRACE_ISSET_ID = 2;
  private static final int __TID_ISSET_ID = 3;
  private byte __isset_bitfield;
  public static final Map<_Fields, FieldMetaData> metaDataMap;

  static {
    final Map<_Fields, FieldMetaData> tmpMap =
        new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODE,
               new FieldMetaData("mode", TFieldRequirementType.REQUIRED,
                                 new EnumMetaData(TType.ENUM,
                                                  RequestMode.class)));
    tmpMap.put(_Fields.FROMUID,
               new FieldMetaData("fromuid", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DESTUID,
               new FieldMetaData("destuid", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FILE,
               new FieldMetaData("file", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RULE,
               new FieldMetaData("rule", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.INFO,
               new FieldMetaData("info", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MD5,
               new FieldMetaData("md5", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.BLOCKSIZE,
               new FieldMetaData("blocksize", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.START,
               new FieldMetaData("start", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DELAY,
               new FieldMetaData("delay", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NOTRACE,
               new FieldMetaData("notrace", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.TID,
               new FieldMetaData("tid", TFieldRequirementType.OPTIONAL,
                                 new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.ACTION,
               new FieldMetaData("action", TFieldRequirementType.OPTIONAL,
                                 new EnumMetaData(TType.ENUM, Action.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(R66Request.class, metaDataMap);
  }

  public R66Request() {
    md5 = false;

    notrace = false;

  }

  public R66Request(RequestMode mode) {
    this();
    this.mode = mode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public R66Request(R66Request other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMode()) {
      mode = other.mode;
    }
    if (other.isSetFromuid()) {
      fromuid = other.fromuid;
    }
    if (other.isSetDestuid()) {
      destuid = other.destuid;
    }
    if (other.isSetFile()) {
      file = other.file;
    }
    if (other.isSetRule()) {
      rule = other.rule;
    }
    if (other.isSetInfo()) {
      info = other.info;
    }
    md5 = other.md5;
    blocksize = other.blocksize;
    if (other.isSetStart()) {
      start = other.start;
    }
    if (other.isSetDelay()) {
      delay = other.delay;
    }
    notrace = other.notrace;
    tid = other.tid;
    if (other.isSetAction()) {
      action = other.action;
    }
  }

  @Override
  public R66Request deepCopy() {
    return new R66Request(this);
  }

  @Override
  public void clear() {
    mode = null;
    fromuid = null;
    destuid = null;
    file = null;
    rule = null;
    info = null;
    md5 = false;

    setBlocksizeIsSet(false);
    blocksize = 0;
    start = null;
    delay = null;
    notrace = false;

    setTidIsSet(false);
    tid = 0;
    action = null;
  }

  /**
   * @see RequestMode
   */
  public RequestMode getMode() {
    return mode;
  }

  /**
   * @see RequestMode
   */
  public R66Request setMode(RequestMode mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    mode = null;
  }

  /**
   * Returns true if field mode is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetMode() {
    return mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      mode = null;
    }
  }

  public String getFromuid() {
    return fromuid;
  }

  public R66Request setFromuid(String fromuid) {
    this.fromuid = fromuid;
    return this;
  }

  public void unsetFromuid() {
    fromuid = null;
  }

  /**
   * Returns true if field fromuid is set (has been assigned a value) and
   * false
   * otherwise
   */
  public boolean isSetFromuid() {
    return fromuid != null;
  }

  public void setFromuidIsSet(boolean value) {
    if (!value) {
      fromuid = null;
    }
  }

  public String getDestuid() {
    return destuid;
  }

  public R66Request setDestuid(String destuid) {
    this.destuid = destuid;
    return this;
  }

  public void unsetDestuid() {
    destuid = null;
  }

  /**
   * Returns true if field destuid is set (has been assigned a value) and
   * false
   * otherwise
   */
  public boolean isSetDestuid() {
    return destuid != null;
  }

  public void setDestuidIsSet(boolean value) {
    if (!value) {
      destuid = null;
    }
  }

  public String getFile() {
    return file;
  }

  public R66Request setFile(String file) {
    this.file = file;
    return this;
  }

  public void unsetFile() {
    file = null;
  }

  /**
   * Returns true if field file is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetFile() {
    return file != null;
  }

  public void setFileIsSet(boolean value) {
    if (!value) {
      file = null;
    }
  }

  public String getRule() {
    return rule;
  }

  public R66Request setRule(String rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    rule = null;
  }

  /**
   * Returns true if field rule is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetRule() {
    return rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      rule = null;
    }
  }

  public String getInfo() {
    return info;
  }

  public R66Request setInfo(String info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    info = null;
  }

  /**
   * Returns true if field info is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetInfo() {
    return info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      info = null;
    }
  }

  public boolean isMd5() {
    return md5;
  }

  public R66Request setMd5(boolean md5) {
    this.md5 = md5;
    setMd5IsSet(true);
    return this;
  }

  public void unsetMd5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MD5_ISSET_ID);
  }

  /**
   * Returns true if field md5 is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetMd5() {
    return EncodingUtils.testBit(__isset_bitfield, __MD5_ISSET_ID);
  }

  public void setMd5IsSet(boolean value) {
    __isset_bitfield =
        EncodingUtils.setBit(__isset_bitfield, __MD5_ISSET_ID, value);
  }

  public int getBlocksize() {
    return blocksize;
  }

  public R66Request setBlocksize(int blocksize) {
    this.blocksize = blocksize;
    setBlocksizeIsSet(true);
    return this;
  }

  public void unsetBlocksize() {
    __isset_bitfield =
        EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  /**
   * Returns true if field blocksize is set (has been assigned a value) and
   * false otherwise
   */
  public boolean isSetBlocksize() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  public void setBlocksizeIsSet(boolean value) {
    __isset_bitfield =
        EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
  }

  public String getStart() {
    return start;
  }

  public R66Request setStart(String start) {
    this.start = start;
    return this;
  }

  public void unsetStart() {
    start = null;
  }

  /**
   * Returns true if field start is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetStart() {
    return start != null;
  }

  public void setStartIsSet(boolean value) {
    if (!value) {
      start = null;
    }
  }

  public String getDelay() {
    return delay;
  }

  public R66Request setDelay(String delay) {
    this.delay = delay;
    return this;
  }

  public void unsetDelay() {
    delay = null;
  }

  /**
   * Returns true if field delay is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetDelay() {
    return delay != null;
  }

  public void setDelayIsSet(boolean value) {
    if (!value) {
      delay = null;
    }
  }

  public boolean isNotrace() {
    return notrace;
  }

  public R66Request setNotrace(boolean notrace) {
    this.notrace = notrace;
    setNotraceIsSet(true);
    return this;
  }

  public void unsetNotrace() {
    __isset_bitfield =
        EncodingUtils.clearBit(__isset_bitfield, __NOTRACE_ISSET_ID);
  }

  /**
   * Returns true if field notrace is set (has been assigned a value) and
   * false
   * otherwise
   */
  public boolean isSetNotrace() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTRACE_ISSET_ID);
  }

  public void setNotraceIsSet(boolean value) {
    __isset_bitfield =
        EncodingUtils.setBit(__isset_bitfield, __NOTRACE_ISSET_ID, value);
  }

  public long getTid() {
    return tid;
  }

  public R66Request setTid(long tid) {
    this.tid = tid;
    setTidIsSet(true);
    return this;
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /**
   * Returns true if field tid is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield =
        EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  /**
   * @see Action
   */
  public Action getAction() {
    return action;
  }

  /**
   * @see Action
   */
  public R66Request setAction(Action action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    action = null;
  }

  /**
   * Returns true if field action is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetAction() {
    return action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      action = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((RequestMode) value);
        }
        break;

      case FROMUID:
        if (value == null) {
          unsetFromuid();
        } else {
          setFromuid((String) value);
        }
        break;

      case DESTUID:
        if (value == null) {
          unsetDestuid();
        } else {
          setDestuid((String) value);
        }
        break;

      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((String) value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((String) value);
        }
        break;

      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((String) value);
        }
        break;

      case MD5:
        if (value == null) {
          unsetMd5();
        } else {
          setMd5((Boolean) value);
        }
        break;

      case BLOCKSIZE:
        if (value == null) {
          unsetBlocksize();
        } else {
          setBlocksize((Integer) value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((String) value);
        }
        break;

      case DELAY:
        if (value == null) {
          unsetDelay();
        } else {
          setDelay((String) value);
        }
        break;

      case NOTRACE:
        if (value == null) {
          unsetNotrace();
        } else {
          setNotrace((Boolean) value);
        }
        break;

      case TID:
        if (value == null) {
          unsetTid();
        } else {
          setTid((Long) value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((Action) value);
        }
        break;

    }
  }

  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case MODE:
        return getMode();

      case FROMUID:
        return getFromuid();

      case DESTUID:
        return getDestuid();

      case FILE:
        return getFile();

      case RULE:
        return getRule();

      case INFO:
        return getInfo();

      case MD5:
        return Boolean.valueOf(isMd5());

      case BLOCKSIZE:
        return Integer.valueOf(getBlocksize());

      case START:
        return getStart();

      case DELAY:
        return getDelay();

      case NOTRACE:
        return Boolean.valueOf(isNotrace());

      case TID:
        return Long.valueOf(getTid());

      case ACTION:
        return getAction();

    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned
   * a
   * value) and false otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case MODE:
        return isSetMode();
      case FROMUID:
        return isSetFromuid();
      case DESTUID:
        return isSetDestuid();
      case FILE:
        return isSetFile();
      case RULE:
        return isSetRule();
      case INFO:
        return isSetInfo();
      case MD5:
        return isSetMd5();
      case BLOCKSIZE:
        return isSetBlocksize();
      case START:
        return isSetStart();
      case DELAY:
        return isSetDelay();
      case NOTRACE:
        return isSetNotrace();
      case TID:
        return isSetTid();
      case ACTION:
        return isSetAction();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null) {
      return false;
    }
    if (that instanceof R66Request) {
      return equals((R66Request) that);
    }
    return false;
  }

  public boolean equals(R66Request that) {
    if (that == null) {
      return false;
    }

    final boolean this_present_mode = true && isSetMode();
    final boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode)) {
        return false;
      }
      if (!mode.equals(that.mode)) {
        return false;
      }
    }

    final boolean this_present_fromuid = true && isSetFromuid();
    final boolean that_present_fromuid = true && that.isSetFromuid();
    if (this_present_fromuid || that_present_fromuid) {
      if (!(this_present_fromuid && that_present_fromuid)) {
        return false;
      }
      if (!fromuid.equals(that.fromuid)) {
        return false;
      }
    }

    final boolean this_present_destuid = true && isSetDestuid();
    final boolean that_present_destuid = true && that.isSetDestuid();
    if (this_present_destuid || that_present_destuid) {
      if (!(this_present_destuid && that_present_destuid)) {
        return false;
      }
      if (!destuid.equals(that.destuid)) {
        return false;
      }
    }

    final boolean this_present_file = true && isSetFile();
    final boolean that_present_file = true && that.isSetFile();
    if (this_present_file || that_present_file) {
      if (!(this_present_file && that_present_file)) {
        return false;
      }
      if (!file.equals(that.file)) {
        return false;
      }
    }

    final boolean this_present_rule = true && isSetRule();
    final boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule)) {
        return false;
      }
      if (!rule.equals(that.rule)) {
        return false;
      }
    }

    final boolean this_present_info = true && isSetInfo();
    final boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info)) {
        return false;
      }
      if (!info.equals(that.info)) {
        return false;
      }
    }

    final boolean this_present_md5 = true && isSetMd5();
    final boolean that_present_md5 = true && that.isSetMd5();
    if (this_present_md5 || that_present_md5) {
      if (!(this_present_md5 && that_present_md5)) {
        return false;
      }
      if (md5 != that.md5) {
        return false;
      }
    }

    final boolean this_present_blocksize = true && isSetBlocksize();
    final boolean that_present_blocksize = true && that.isSetBlocksize();
    if (this_present_blocksize || that_present_blocksize) {
      if (!(this_present_blocksize && that_present_blocksize)) {
        return false;
      }
      if (blocksize != that.blocksize) {
        return false;
      }
    }

    final boolean this_present_start = true && isSetStart();
    final boolean that_present_start = true && that.isSetStart();
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start)) {
        return false;
      }
      if (!start.equals(that.start)) {
        return false;
      }
    }

    final boolean this_present_delay = true && isSetDelay();
    final boolean that_present_delay = true && that.isSetDelay();
    if (this_present_delay || that_present_delay) {
      if (!(this_present_delay && that_present_delay)) {
        return false;
      }
      if (!delay.equals(that.delay)) {
        return false;
      }
    }

    final boolean this_present_notrace = true && isSetNotrace();
    final boolean that_present_notrace = true && that.isSetNotrace();
    if (this_present_notrace || that_present_notrace) {
      if (!(this_present_notrace && that_present_notrace)) {
        return false;
      }
      if (notrace != that.notrace) {
        return false;
      }
    }

    final boolean this_present_tid = true && isSetTid();
    final boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid)) {
        return false;
      }
      if (tid != that.tid) {
        return false;
      }
    }

    final boolean this_present_action = true && isSetAction();
    final boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action)) {
        return false;
      }
      return action.equals(that.action);
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(R66Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    final R66Request typedOther = other;

    lastComparison =
        Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = TBaseHelper.compareTo(mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetFromuid()).compareTo(typedOther.isSetFromuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromuid()) {
      lastComparison = TBaseHelper.compareTo(fromuid, typedOther.fromuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetDestuid()).compareTo(typedOther.isSetDestuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestuid()) {
      lastComparison = TBaseHelper.compareTo(destuid, typedOther.destuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile()) {
      lastComparison = TBaseHelper.compareTo(file, typedOther.file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = TBaseHelper.compareTo(rule, typedOther.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetInfo()).compareTo(typedOther.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = TBaseHelper.compareTo(info, typedOther.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetMd5()).compareTo(typedOther.isSetMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMd5()) {
      lastComparison = TBaseHelper.compareTo(md5, typedOther.md5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocksize())
                            .compareTo(typedOther.isSetBlocksize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocksize()) {
      lastComparison = TBaseHelper.compareTo(blocksize, typedOther.blocksize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = TBaseHelper.compareTo(start, typedOther.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetDelay()).compareTo(typedOther.isSetDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelay()) {
      lastComparison = TBaseHelper.compareTo(delay, typedOther.delay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetNotrace()).compareTo(typedOther.isSetNotrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotrace()) {
      lastComparison = TBaseHelper.compareTo(notrace, typedOther.notrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = TBaseHelper.compareTo(tid, typedOther.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = TBaseHelper.compareTo(action, typedOther.action);
      return lastComparison;
    }
    return 0;
  }

  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  @Override
  public void write(TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    final StringBuilder sb = new StringBuilder("R66Request(");
    boolean first = true;

    sb.append("mode:");
    if (mode == null) {
      sb.append("null");
    } else {
      sb.append(mode);
    }
    first = false;
    if (isSetFromuid()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("fromuid:");
      if (fromuid == null) {
        sb.append("null");
      } else {
        sb.append(fromuid);
      }
      first = false;
    }
    if (isSetDestuid()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("destuid:");
      if (destuid == null) {
        sb.append("null");
      } else {
        sb.append(destuid);
      }
      first = false;
    }
    if (isSetFile()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("file:");
      if (file == null) {
        sb.append("null");
      } else {
        sb.append(file);
      }
      first = false;
    }
    if (isSetRule()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("rule:");
      if (rule == null) {
        sb.append("null");
      } else {
        sb.append(rule);
      }
      first = false;
    }
    if (isSetInfo()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("info:");
      if (info == null) {
        sb.append("null");
      } else {
        sb.append(info);
      }
      first = false;
    }
    if (isSetMd5()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("md5:").append(md5);
      first = false;
    }
    if (isSetBlocksize()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("blocksize:").append(blocksize);
      first = false;
    }
    if (isSetStart()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("start:");
      if (start == null) {
        sb.append("null");
      } else {
        sb.append(start);
      }
      first = false;
    }
    if (isSetDelay()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("delay:");
      if (delay == null) {
        sb.append("null");
      } else {
        sb.append(delay);
      }
      first = false;
    }
    if (isSetNotrace()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("notrace:").append(notrace);
      first = false;
    }
    if (isSetTid()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("tid:").append(tid);
      first = false;
    }
    if (isSetAction()) {
      if (!first) {
        sb.append(", ");
      }
      sb.append("action:");
      if (action == null) {
        sb.append("null");
      } else {
        sb.append(action);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (mode == null) {
      throw new TProtocolException(
          "Required field 'mode' was not present! Struct: " + this);
    }
    // check for sub-struct validity
  }

  private void writeObject(ObjectOutputStream out) throws IOException {
    try {
      write(new TCompactProtocol(new TIOStreamTransport(out)));
    } catch (final TException te) {
      throw new IOException(te);
    }
  }

  private void readObject(ObjectInputStream in)
      throws IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new TCompactProtocol(new TIOStreamTransport(in)));
    } catch (final TException te) {
      throw new IOException(te);
    }
  }

  private static class R66RequestStandardSchemeFactory
      implements SchemeFactory {
    @Override
    public R66RequestStandardScheme getScheme() {
      return new R66RequestStandardScheme();
    }
  }

  private static class R66RequestStandardScheme
      extends StandardScheme<R66Request> {

    @Override
    public void read(TProtocol iprot, R66Request struct) throws TException {
      TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // MODE
            if (schemeField.type == TType.I32) {
              struct.mode = RequestMode.findByValue(iprot.readI32());
              struct.setModeIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROMUID
            if (schemeField.type == TType.STRING) {
              struct.fromuid = iprot.readString();
              struct.setFromuidIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESTUID
            if (schemeField.type == TType.STRING) {
              struct.destuid = iprot.readString();
              struct.setDestuidIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE
            if (schemeField.type == TType.STRING) {
              struct.file = iprot.readString();
              struct.setFileIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RULE
            if (schemeField.type == TType.STRING) {
              struct.rule = iprot.readString();
              struct.setRuleIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INFO
            if (schemeField.type == TType.STRING) {
              struct.info = iprot.readString();
              struct.setInfoIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MD5
            if (schemeField.type == TType.BOOL) {
              struct.md5 = iprot.readBool();
              struct.setMd5IsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BLOCKSIZE
            if (schemeField.type == TType.I32) {
              struct.blocksize = iprot.readI32();
              struct.setBlocksizeIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // START
            if (schemeField.type == TType.STRING) {
              struct.start = iprot.readString();
              struct.setStartIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DELAY
            if (schemeField.type == TType.STRING) {
              struct.delay = iprot.readString();
              struct.setDelayIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOTRACE
            if (schemeField.type == TType.BOOL) {
              struct.notrace = iprot.readBool();
              struct.setNotraceIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TID
            if (schemeField.type == TType.I64) {
              struct.tid = iprot.readI64();
              struct.setTidIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ACTION
            if (schemeField.type == TType.I32) {
              struct.action = Action.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate
      // method
      struct.validate();
    }

    @Override
    public void write(TProtocol oprot, R66Request struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mode != null) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI32(struct.mode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fromuid != null) {
        if (struct.isSetFromuid()) {
          oprot.writeFieldBegin(FROMUID_FIELD_DESC);
          oprot.writeString(struct.fromuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.destuid != null) {
        if (struct.isSetDestuid()) {
          oprot.writeFieldBegin(DESTUID_FIELD_DESC);
          oprot.writeString(struct.destuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file != null) {
        if (struct.isSetFile()) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeString(struct.file);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rule != null) {
        if (struct.isSetRule()) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          oprot.writeString(struct.rule);
          oprot.writeFieldEnd();
        }
      }
      if (struct.info != null) {
        if (struct.isSetInfo()) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          oprot.writeString(struct.info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMd5()) {
        oprot.writeFieldBegin(MD5_FIELD_DESC);
        oprot.writeBool(struct.md5);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBlocksize()) {
        oprot.writeFieldBegin(BLOCKSIZE_FIELD_DESC);
        oprot.writeI32(struct.blocksize);
        oprot.writeFieldEnd();
      }
      if (struct.start != null) {
        if (struct.isSetStart()) {
          oprot.writeFieldBegin(START_FIELD_DESC);
          oprot.writeString(struct.start);
          oprot.writeFieldEnd();
        }
      }
      if (struct.delay != null) {
        if (struct.isSetDelay()) {
          oprot.writeFieldBegin(DELAY_FIELD_DESC);
          oprot.writeString(struct.delay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNotrace()) {
        oprot.writeFieldBegin(NOTRACE_FIELD_DESC);
        oprot.writeBool(struct.notrace);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTid()) {
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeI64(struct.tid);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        if (struct.isSetAction()) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeI32(struct.action.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class R66RequestTupleSchemeFactory implements SchemeFactory {
    @Override
    public R66RequestTupleScheme getScheme() {
      return new R66RequestTupleScheme();
    }
  }

  private static class R66RequestTupleScheme extends TupleScheme<R66Request> {

    @Override
    public void write(TProtocol prot, R66Request struct) throws TException {
      final TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.mode.getValue());
      final BitSet optionals = new BitSet();
      if (struct.isSetFromuid()) {
        optionals.set(0);
      }
      if (struct.isSetDestuid()) {
        optionals.set(1);
      }
      if (struct.isSetFile()) {
        optionals.set(2);
      }
      if (struct.isSetRule()) {
        optionals.set(3);
      }
      if (struct.isSetInfo()) {
        optionals.set(4);
      }
      if (struct.isSetMd5()) {
        optionals.set(5);
      }
      if (struct.isSetBlocksize()) {
        optionals.set(6);
      }
      if (struct.isSetStart()) {
        optionals.set(7);
      }
      if (struct.isSetDelay()) {
        optionals.set(8);
      }
      if (struct.isSetNotrace()) {
        optionals.set(9);
      }
      if (struct.isSetTid()) {
        optionals.set(10);
      }
      if (struct.isSetAction()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetFromuid()) {
        oprot.writeString(struct.fromuid);
      }
      if (struct.isSetDestuid()) {
        oprot.writeString(struct.destuid);
      }
      if (struct.isSetFile()) {
        oprot.writeString(struct.file);
      }
      if (struct.isSetRule()) {
        oprot.writeString(struct.rule);
      }
      if (struct.isSetInfo()) {
        oprot.writeString(struct.info);
      }
      if (struct.isSetMd5()) {
        oprot.writeBool(struct.md5);
      }
      if (struct.isSetBlocksize()) {
        oprot.writeI32(struct.blocksize);
      }
      if (struct.isSetStart()) {
        oprot.writeString(struct.start);
      }
      if (struct.isSetDelay()) {
        oprot.writeString(struct.delay);
      }
      if (struct.isSetNotrace()) {
        oprot.writeBool(struct.notrace);
      }
      if (struct.isSetTid()) {
        oprot.writeI64(struct.tid);
      }
      if (struct.isSetAction()) {
        oprot.writeI32(struct.action.getValue());
      }
    }

    @Override
    public void read(TProtocol prot, R66Request struct) throws TException {
      final TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mode = RequestMode.findByValue(iprot.readI32());
      struct.setModeIsSet(true);
      final BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.fromuid = iprot.readString();
        struct.setFromuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.destuid = iprot.readString();
        struct.setDestuidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.file = iprot.readString();
        struct.setFileIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rule = iprot.readString();
        struct.setRuleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.info = iprot.readString();
        struct.setInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.md5 = iprot.readBool();
        struct.setMd5IsSet(true);
      }
      if (incoming.get(6)) {
        struct.blocksize = iprot.readI32();
        struct.setBlocksizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.start = iprot.readString();
        struct.setStartIsSet(true);
      }
      if (incoming.get(8)) {
        struct.delay = iprot.readString();
        struct.setDelayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.notrace = iprot.readBool();
        struct.setNotraceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tid = iprot.readI64();
        struct.setTidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.action = Action.findByValue(iprot.readI32());
        struct.setActionIsSet(true);
      }
    }
  }

}
